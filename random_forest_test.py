# -*- coding: utf-8 -*-
"""Random Forest_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O05FGPFtWFlrqRRA9w5Fuy7ZtwN8eJ1F
"""

# Commented out IPython magic to ensure Python compatibility.
# ALGORITMO DE RANDOM FOREST
# Se accede a las carpetas de Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Se habilita entrada de código
from ast import Mult

# Se habilitan gráficos dentro de Jupyter Notebook
# %matplotlib inline

# Se importan las librerías necesarias
import pandas as pd
import numpy as np
import csv
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

# Se definen los parámetros y los valores a testear
param_grid = {
   'n_estimators': [100, 200, 300],
   'max_depth': [None, 5, 10]
}

# Se accede al archivo CSV de entrenamiento
pitch_train = '/content/drive/MyDrive/port_coruna/pitch_train.csv'
df = pd.read_csv(pitch_train)
df.dropna(inplace = True)
x_train = df[['dwt','h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_train = df[['mov_avg', 'mov_max', 'mov_sig']]
# Entrenamiento del modelo Random Forest
model_rf = RandomForestRegressor()
grid_search = GridSearchCV(model_rf, param_grid, cv = 5)
model_rf.fit(x_train, y_train)
grid_search.fit(x_train, y_train)
best_estimator = grid_search.best_estimator_
# Se accede al conjunto de prueba
pitch_test = '/content/drive/MyDrive/port_coruna/pitch_test.csv'
df_test = pd.read_csv(pitch_test)
x_test = df_test[['dwt', 'h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_test = df_test[['mov_avg', 'mov_max', 'mov_sig']]
# Se aplica el modelo Random Forest al conjunto de prueba
prediction_rf = best_estimator.predict(x_test)
r2_rf = r2_score(y_test, prediction_rf)
importance = model_rf.feature_importances_

print("Mejores parámetros:", best_estimator)
print("Importancia de características:")
for i, feature in enumerate(x_train.columns):
    print(f"{feature}: {importance[i]}")

plt.scatter(y_test, prediction_rf)
plt.xlabel('Valores reales')
plt.ylabel('Predicciones')
plt.title('Comparación entre valores reales y predicciones')
plt.show()
print("Número de árboles para Random Forest: ", model_rf.n_estimators)

# Commented out IPython magic to ensure Python compatibility.
# ALGORITMO DE RANDOM FOREST
# Se accede a las carpetas de Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Se habilita entrada de código
from ast import Mult

# Se habilitan gráficos dentro de Jupyter Notebook
# %matplotlib inline

# Se importan las librerías necesarias
import pandas as pd
import numpy as np
import csv
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

# Se definen los parámetros y los valores a testear
param_grid = {
   'n_estimators': [100, 200, 300],
   'max_depth': [None, 5, 10]
}

# Se accede al archivo CSV de entrenamiento
surge_train = '/content/drive/MyDrive/port_coruna/surge_train.csv'
df = pd.read_csv(surge_train)
df.dropna(inplace = True)
x_train = df[['dwt','h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_train = df[['mov_avg', 'mov_max', 'mov_sig']]
# Entrenamiento del modelo Random Forest
model_rf = RandomForestRegressor()
grid_search = GridSearchCV(model_rf, param_grid, cv = 5)
model_rf.fit(x_train, y_train)
grid_search.fit(x_train, y_train)
best_estimator = grid_search.best_estimator_
# Se accede al conjunto de prueba
surge_test = '/content/drive/MyDrive/port_coruna/surge_test.csv'
df_test = pd.read_csv(surge_test)
x_test = df_test[['dwt', 'h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_test = df_test[['mov_avg', 'mov_max', 'mov_sig']]
# Se aplica el modelo Random Forest al conjunto de prueba
prediction_rf = best_estimator.predict(x_test)
r2_rf = r2_score(y_test, prediction_rf)
importance = model_rf.feature_importances_

print("Mejores parámetros:", best_estimator)
print("Importancia de características:")
for i, feature in enumerate(x_train.columns):
    print(f"{feature}: {importance[i]}")

plt.scatter(y_test, prediction_rf)
plt.xlabel('Valores reales')
plt.ylabel('Predicciones')
plt.title('Comparación entre valores reales y predicciones')
plt.show()
print("Número de árboles para Random Forest: ", model_rf.n_estimators)

# Commented out IPython magic to ensure Python compatibility.
# ALGORITMO DE RANDOM FOREST
# Se accede a las carpetas de Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Se habilita entrada de código
from ast import Mult

# Se habilitan gráficos dentro de Jupyter Notebook
# %matplotlib inline

# Se importan las librerías necesarias
import pandas as pd
import numpy as np
import csv
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

# Se definen los parámetros y los valores a testear
param_grid = {
   'n_estimators': [100, 200, 300],
   'max_depth': [None, 5, 10]
}

# Se accede al archivo CSV de entrenamiento
sway_train = '/content/drive/MyDrive/port_coruna/sway_train.csv'
df = pd.read_csv(sway_train)
df.dropna(inplace = True)
x_train = df[['dwt','h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_train = df[['mov_avg', 'mov_max', 'mov_sig']]
# Entrenamiento del modelo Random Forest
model_rf = RandomForestRegressor()
grid_search = GridSearchCV(model_rf, param_grid, cv = 5)
model_rf.fit(x_train, y_train)
grid_search.fit(x_train, y_train)
best_estimator = grid_search.best_estimator_
# Se accede al conjunto de prueba
sway_test = '/content/drive/MyDrive/port_coruna/sway_test.csv'
df_test = pd.read_csv(sway_test)
x_test = df_test[['dwt', 'h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_test = df_test[['mov_avg', 'mov_max', 'mov_sig']]
# Se aplica el modelo Random Forest al conjunto de prueba
prediction_rf = best_estimator.predict(x_test)
r2_rf = r2_score(y_test, prediction_rf)
importance = model_rf.feature_importances_

print("Mejores parámetros:", best_estimator)
print("Importancia de características:")
for i, feature in enumerate(x_train.columns):
    print(f"{feature}: {importance[i]}")

plt.scatter(y_test, prediction_rf)
plt.xlabel('Valores reales')
plt.ylabel('Predicciones')
plt.title('Comparación entre valores reales y predicciones')
plt.show()
print("Número de árboles para Random Forest: ", model_rf.n_estimators)

# Commented out IPython magic to ensure Python compatibility.
# ALGORITMO DE RANDOM FOREST
# Se accede a las carpetas de Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Se habilita entrada de código
from ast import Mult

# Se habilitan gráficos dentro de Jupyter Notebook
# %matplotlib inline

# Se importan las librerías necesarias
import pandas as pd
import numpy as np
import csv
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

# Se definen los parámetros y los valores a testear
param_grid = {
   'n_estimators': [100, 200, 300],
   'max_depth': [None, 5, 10]
}

# Se accede al archivo CSV de entrenamiento
roll_train = '/content/drive/MyDrive/port_coruna/roll_train.csv'
df = pd.read_csv(roll_train)
df.dropna(inplace = True)
x_train = df[['dwt','h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_train = df[['mov_avg', 'mov_max', 'mov_sig']]
# Entrenamiento del modelo Random Forest
model_rf = RandomForestRegressor()
grid_search = GridSearchCV(model_rf, param_grid, cv = 5)
model_rf.fit(x_train, y_train)
grid_search.fit(x_train, y_train)
best_estimator = grid_search.best_estimator_
# Se accede al conjunto de prueba
roll_test = '/content/drive/MyDrive/port_coruna/roll_test.csv'
df_test = pd.read_csv(roll_test)
x_test = df_test[['dwt', 'h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_test = df_test[['mov_avg', 'mov_max', 'mov_sig']]
# Se aplica el modelo Random Forest al conjunto de prueba
prediction_rf = best_estimator.predict(x_test)
r2_rf = r2_score(y_test, prediction_rf)
importance = model_rf.feature_importances_

print("Mejores parámetros:", best_estimator)
print("Importancia de características:")
for i, feature in enumerate(x_train.columns):
    print(f"{feature}: {importance[i]}")

plt.scatter(y_test, prediction_rf)
plt.xlabel('Valores reales')
plt.ylabel('Predicciones')
plt.title('Comparación entre valores reales y predicciones')
plt.show()
print("Número de árboles para Random Forest: ", model_rf.n_estimators)

# Commented out IPython magic to ensure Python compatibility.
# ALGORITMO DE RANDOM FOREST
# Se accede a las carpetas de Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Se habilita entrada de código
from ast import Mult

# Se habilitan gráficos dentro de Jupyter Notebook
# %matplotlib inline

# Se importan las librerías necesarias
import pandas as pd
import numpy as np
import csv
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

# Se definen los parámetros y los valores a testear
param_grid = {
   'n_estimators': [100, 200, 300],
   'max_depth': [None, 5, 10]
}

# Se accede al archivo CSV de entrenamiento
yaw_train = '/content/drive/MyDrive/port_coruna/yaw_train.csv'
df = pd.read_csv(yaw_train)
df.dropna(inplace = True)
x_train = df[['dwt','h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_train = df[['mov_avg', 'mov_max', 'mov_sig']]
# Entrenamiento del modelo Random Forest
model_rf = RandomForestRegressor()
grid_search = GridSearchCV(model_rf, param_grid, cv = 5)
model_rf.fit(x_train, y_train)
grid_search.fit(x_train, y_train)
best_estimator = grid_search.best_estimator_
# Se accede al conjunto de prueba
yaw_test = '/content/drive/MyDrive/port_coruna/yaw_test.csv'
df_test = pd.read_csv(yaw_test)
x_test = df_test[['dwt', 'h_s', 't_p', 'dir', 'wind_speed', 'wind_dir', 'h_0', 'h_sm', 'length', 'breath']]
y_test = df_test[['mov_avg', 'mov_max', 'mov_sig']]
# Se aplica el modelo Random Forest al conjunto de prueba
prediction_rf = best_estimator.predict(x_test)
r2_rf = r2_score(y_test, prediction_rf)
importance = model_rf.feature_importances_

print("Mejores parámetros:", best_estimator)
print("Importancia de características:")
for i, feature in enumerate(x_train.columns):
    print(f"{feature}: {importance[i]}")

plt.scatter(y_test, prediction_rf)
plt.xlabel('Valores reales')
plt.ylabel('Predicciones')
plt.title('Comparación entre valores reales y predicciones')
plt.show()
print("Número de árboles para Random Forest: ", model_rf.n_estimators)